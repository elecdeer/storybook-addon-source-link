name: Add Changeset to Renovate PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  add-changeset:
    if: ${{ startsWith(github.head_ref, 'renovate/') }}
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check and create changeset
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            
            const CHANGESET_DIR = '.changeset';
            const PACKAGE_NAME = 'storybook-addon-source-link';
            
            function execCommand(command) {
              return execSync(command, { encoding: 'utf8' }).trim();
            }
            
            function getChangedChangesetFiles() {
              const changedFiles = execCommand('git diff --name-only HEAD~1 HEAD').split('\n');
              return changedFiles.filter(file => 
                file.startsWith('.changeset/') && 
                file.endsWith('.md') && 
                !file.includes('README.md')
              );
            }
            
            function isChangesetCreatedByBot(changesetFiles) {
              if (changesetFiles.length === 0) return false;
              
              try {
                const changesetCommit = execCommand(
                  "git log --oneline --follow --diff-filter=A HEAD~1..HEAD -- '.changeset/*.md'"
                ).split('\n')[0];
                
                if (!changesetCommit) return false;
                
                const commitHash = changesetCommit.split(' ')[0];
                const commitAuthor = execCommand(`git log --format="%an" -n 1 ${commitHash}`);
                
                const isBotCreated = commitAuthor === 'GitHub Action' || commitAuthor.includes('[bot]');
                console.log(`Changeset author: ${commitAuthor}, bot created: ${isBotCreated}`);
                
                return isBotCreated;
              } catch (error) {
                console.log('Error checking changeset author:', error.message);
                return false;
              }
            }
            
            function createChangesetContent(commitMessage) {
              return [
                '---',
                `"${PACKAGE_NAME}": patch`,
                '---',
                '',
                commitMessage,
                ''
              ].join('\n');
            }
            
            function setupGitConfig() {
              execCommand('git config --local user.email "action@github.com"');
              execCommand('git config --local user.name "GitHub Action"');
            }
            
            function commitAndPush() {
              execCommand('git add .changeset/');
              
              try {
                execCommand('git diff --staged --quiet');
                console.log('No changeset to commit');
              } catch (error) {
                execCommand('git commit -m "chore: add changeset for renovate PR"');
                execCommand(`git push origin ${context.payload.pull_request.head.ref}`);
                console.log('Changeset committed and pushed');
              }
            }
            
            // Main logic
            const stagedChangesets = getChangedChangesetFiles();
            console.log(`Found ${stagedChangesets.length} staged changeset files`);
            
            const botCreated = isChangesetCreatedByBot(stagedChangesets);
            
            // Determine action based on changeset state
            if (stagedChangesets.length > 0 && !botCreated) {
              console.log('Human-created changeset exists, skipping');
              return;
            }
            
            const commitMessage = execCommand('git log --format="%s" -n 1');
            console.log(`Commit message: ${commitMessage}`);
            
            const changesetContent = createChangesetContent(commitMessage);
            
            let changesetPath;
            if (botCreated && stagedChangesets.length > 0) {
              changesetPath = stagedChangesets[0];
              console.log(`Overwriting bot-created changeset: ${changesetPath}`);
            } else {
              const timestamp = Date.now();
              changesetPath = path.join(CHANGESET_DIR, `renovate-${timestamp}.md`);
              console.log(`Creating new changeset: ${changesetPath}`);
            }
            
            fs.writeFileSync(changesetPath, changesetContent);
            setupGitConfig();
            commitAndPush();
